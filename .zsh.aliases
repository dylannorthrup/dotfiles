# Cloudfoundry-specific stuff

PROMPT='$(git_prompt_info)[%*] [%{$fg[cyan]%}${PWD/#$HOME/~}%{$reset_color%}] security_mandated_hostname ${ret_status}%{$reset_color%} '

# Source in cflogin file
if [ -f "$HOME/.cflogin" ]; then
  source "$HOME/.cflogin"
fi

export PATH=${PATH}:${HOME}/google-cloud-sdk/bin
PATH=${PATH}:/Applications/Wine\ Staging.app/Contents/Resources/wine/bin

# User specific aliases and functions
alias curl='curl -sSL'
alias curlv='curl -sSL -o /dev/null -v'
alias curlvt='curl -sSL -o /dev/null -v -w "HTTP Code: %{response_code}; Connect time: %{time_connect}; Total time:%{time_total}\n"'
alias curlhead='curl -sSL -D - -o /dev/null'
alias diff='diff -W $(( $(tput cols) - 2 ))'
alias dxn='ssh docxstudios@spectator.dreamhost.com'
alias fl8='flake8-3 --ignore=E111,E114,E129'
alias gc='egrep --color'
alias gittyup='git tyup'
alias grep='egrep'
alias gr='gc -r'
alias gv='gc -v'
alias mc='mc --no-color'
alias more='less -X'
alias prespace='sed -e "s/^/ /g"'
alias random='echo $(( ( RANDOM % 60 )  + 1 ))'
alias repos='ls ~/repos'
alias s3cmd="$HOME/bin/gs3"
alias ta='tmux new -t 0'
alias view='nvim -R'
alias watch='watch -d --color'

# Environment variables
export CVSROOT='web:/u1/CVS'
export CVS_RSH='ssh'
export EDITOR='nvim'
export LSCOLORS=hxgxcxdxCxegedabagacad
export LESS='-REX'

export FZF_TMUX=1
export FZF_CTRL_R_OPTS='--sort --exact'
if [ -d /usr/local/Cellar/fzf/*/shell/ ]; then
  . /usr/local/Cellar/fzf/*/shell/key-bindings.zsh
  . /usr/local/Cellar/fzf/*/shell/completion.zsh
else
  echo "NO FZF SHELL COMPLETION DIRECTORY! FZF WON'T WORK LIKE YOU THINK IT SHOULD"
fi

export CACHE_AGE=6000

# History stuff
SAVEHIST=100000
setopt histignorealldups
setopt incappendhistory

## tmux stuff
function ta {
  tmux has-session -t 0
  if [ $? != 0 ]; then
    tmux new-session -s 0 -n "$(~/bin/random_line.rb ~/.tmux/window_names)"
  fi
  tmux attach -t 0
}

if [ ! -z "${TMUX_PANE}" ]; then
  export PANE_NUM=$(tmux list-panes -a | grep $TMUX_PANE 2>/dev/null | awk -F: '{print $2}' | awk -F. '{print $2}' | uniq)
fi

spinner() {
#  update "Entering into spinner with spinner state of '${SPINNER_STATE}'"
  # Print the following characters sequentially: | / - \
  case "${SPINNER_STATE}" in
    '-')
      SPINNER_STATE='\'
      ;;
    '\')
      SPINNER_STATE='|'
      ;;
    '|')
      SPINNER_STATE='/'
      ;;
    '/')
      SPINNER_STATE='-'
      ;;
    *)
      SPINNER_STATE='-'
      ;;
  esac
#  update "SPinner state: ${SPINNER_STATE}"
  update_n "\b${SPINNER_STATE}"
}

# Used to print to STDERR isntead of STDOUT to get information out of functions that
# pass their information around by printing things
# We use update_n to be able to echo things without a newline
update_n() {
  >&2 echo -ne "$*"
}

# Adds a newline and hand off to our utility function above
update() {
  update_n "$*\n"
}

## Golang Stuff
export GOPATH="$HOME/go"
export GOBIN="$HOME/go/bin"

vigo () {
  nvim "${GOPATH}/src/$*/$*.go"
}

newgo () {
  if [ ! -d "${GOPATH}/src/$*" ]; then
    mkdir -p "${GOPATH}/src/$*"
  fi
  vigo $*
  go install "${GOPATH}/src/$*/$*.go"
}

grun () {
  if [ "${PWD}X" != "${GOPATH}X" ]; then
    cd $GOPATH
  fi
  export GOBIN="$GOPATH/bin"
  go install src/$*/$*.go
  if [ $? -eq 0 ]; then
    $*
  else
    echo "Problem doing a go install of src/$*/$*.go"
  fi
}

### Functions

alias functions="typeset -f | egrep '^[a-z]+ \\(\\)' | sed -e 's/()//' | sort"

emw() {
  mwin $(echo $*)
}

kcu() {
  foodcritic -B ~/repos/cookbooks/"$@" | grep FC && echo "Foodcritic failed!" && return
  knife cookbook test "$@" || return
  knife cookbook upload "$@"
}

metaver() {
  echo $(awk '/version/ {print $2}' metadata.rb | tr -d \'\")
}

gitag() {
  TAG="$@"
  git tag "$TAG"
  # If the tag was successful, go ahead and push it out
  if [ $? -eq 0 ]; then
    echo ==== Pushing tag "$TAG" ====
    git push --tags
  fi
}

# Take the previous two functions and combine them to get the metadata version
# then do git tagging
cheftag() {
  gitag $(metaver)
}

demonbox() {
  scp -rp $* docxstudios@spectator.dreamhost.com:~/dropbox/demon/
}

dropbox() {
  scp -rp $* docxstudios@spectator.dreamhost.com:~/dropbox/
}

addsshkey() {
  ssh-copy-id -i ~/.ssh/id_rsa.pub $*
  ssh $*
}

distsshkey() {
  ssh -o PreferredAuthentications=publickey -o KbdInteractiveAuthentication=no -o PasswordAuthentication=no -o StrictHostKeyChecking=no $* 'hostname'
  if [ $? == 255 ]; then
    ssh-copy-id -i ~/.ssh/id_rsa.pub $*
  else
    echo "Was able to log in. No need to copy id"
  fi
}

distkey() {
  distsshkey $*
}

delhostkey() {
  grep -v "$*" ~/.ssh/known_hosts > ~/.ssh/known_hosts.new
  mv ~/.ssh/known_hosts.new ~/.ssh/known_hosts
}

countdown() {
  NUM=$*
  while [ $NUM -gt 0 ]; do
    echo -ne "\r${NUM} "
    NUM=$(expr $NUM - 1)
    sleep 1
  done
  echo -e "\r0 . . . done!"
}

branch() {
  git co -b "${1}"
  git push --set-upstream origin "${1}"
}

gitup() {
  for i in ~/repos/*; do
    if [ -d ${i}/.git ]; then
      echo -e "* Updating ${i}"
      (
        cd $i
        git up
      )
    fi
  done
}

cab() {
  curlv http://${1}${3} | hlhttp
  curlv http://${2}${3} | hlhttp
}

_good_post_size() {
  if [ ${#1} -gt 280 ]; then
    echo "Comment is ${#1} characters long. Please shorten it to 280 or less"
    return 0
  fi
  return 1
}

post() {
  if [ -z "${2}" ]; then
    echo "post MESSAGE"
    return 1
  fi
  # Check the size of our tweet to see how long it is
  _good_post_size "${1}"
  if [ $? ]; then
    echo t update "${1}"
  fi
}

dm() {
  if [ -z "${2}" ]; then
    echo "dm USER MESSAGE"
    return 1
  fi
  # Check the size of our tweet to see how long it is
  _good_post_size "${2}"
  if [ $? ]; then
    echo t dm ${1} "${2}"
  fi
}

reply() {
  if [ -z "${2}" ]; then
    echo "reply TWEET_ID MESSAGE"
    return 1
  fi
  # Check the size of our tweet to see how long it is
  _good_post_size "${2}"
  if [ $? ]; then
    echo t reply ${1} "${2}"
  fi
}

rt() {
  t retweet "${1}"
}

which() {
  if declare -f "$*" > /dev/null; then
    type $*
  else
    WHICHOUT=$(/usr/bin/which $* 2>&1)
    if [ $? -eq 0 ]; then
      echo $WHICHOUT
    else
      echo "Command '${*}' not found"
    fi
  fi
}

encrypt() {
  if [ -f "${@}.gpg" ]; then
    rm ${@}.gpg
  fi
  gpg --encrypt --recipient 'gpg@doc-x.net' $@
  rm $@
}

decrypt() {
  FNAME=$(echo $@ | sed -e 's/.gpg$//')
  gpg --output $FNAME --decrypt $@
}

decat() {
  gpg --decrypt $@
}

espy() {
  knife search node "advertises:${1}" -i
}

notes() {
  NDIR="~/tickets/$@"
  mkdir $NDIR
  cd $NDIR
  nvim notes
}

showcbs() {
  NODE="$@"
  echo "Retrieving cookbook list for $@"
  knife exec -E "puts JSON.pretty_generate(api.get(\"nodes/$NODE/cookbooks\").map { |name,data| {name => data.version} }.reduce :merge)"
}

cdiff() {
  diff "$@" | colorize blue "^>.*" red "^<.*"
}

m4atomp3() {
  i="$@"
  o=$(echo "$i" | sed -e 's/m4a$/mp3/')
  ffmpeg -i "$i" -acodec libmp3lame -ab 128k "$o"
}

# User-Agent Strings
# These are some example UA strings for use in curl strings
export AMIGA='AmigaVoyager/2.95 (compatible; MC680x0; AmigaOS)'
export AND4='Mozilla/5.0 (Linux; U; Android 4.0.3; de-ch; HTC Sensation Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30'
export AND23='Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1'
export BB='Mozilla/5.0 (BlackBerry; U; BlackBerry 9860; en-US) AppleWebKit/534.11+ (KHTML, like Gecko) Version/7.0.0.254 Mobile Safari/534.11+'
export CHROME='Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.60 Safari/537.17'
export FIREFOX='Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1'
export IEMOBILE='Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0)'
export IPHONE='Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; ja-jp) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5'
export IPAD='Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25'
export SAFARI='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13+ (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2'
export SAMSUNGU365='SCH-U365/1.0.NetFront/3.0.22.2.23.(GUI).MMP/2.0'
export WP7='Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; NOKIA; Lumia 800)'
export WP8='Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920'
export BB9700='BlackBerry9700/5.0.0.862 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/120'
export NOKIA8310='Mozilla/5.0 (Symbian/3; Series60/5.3 NokiaE7-00/111.040.1511; Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/535.1 (KHTML, like Gecko) NokiaBrowser/8.3.1.4 Mobile Safari/535.1'
