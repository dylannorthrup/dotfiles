#!/usr/bin/perl -w
#
# Filter to colorize output based on PCRE regexps
#
# Examples:
#   journalctl -f | colorize red ' error .*'
#   journalctl -f | colorize white '^[A-Za-z]{3} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}' blue 'audispd\[\d+\]:'
#

# We have to do this in a BEGIN block since libraries are loaded at BEGIN time.
# This is declared outside the BEGIN block since it needs to be visible in a global
# context
my $lib_dir;
BEGIN {
  # If we have a 'DYLAN_PERL_LIB_DIR' ENV variable, use that.
  $lib_dir = $ENV{'DYLAN_PERL_LIB_DIR'};
  # Otherwise, we'll need to figure out where this program is being run from.
  # To do that, we need abs_path() from Cwd and dirname() from File::Basename
  use Cwd 'abs_path';
  use File::Basename 'dirname';
  # Logic... this program is located in a '/.../bin/' directory.  We use
  # abs_path() to get the absolute path to the program being run (which
  # will look like '/.../bin/colorize').  The Dylan::EColor lib should be in
  # '/.../lib/' which is right beside '/.../bin/'. So, we run dirname once
  # to get the get the parent directory of colorize (which is '/.../bin/'),
  # then again to get the parent of both '/.../bin/' and /.../lib/'. Then
  # we append '/lib' to that and we're off to the races!
  $lib_dir ||= dirname(dirname(abs_path($0))) . "/lib";
}

use lib "$lib_dir";
use Dylan::EColor;
use Term::ANSIColor;
use List::Util 'pairs';

my %colors = get_extended_colors_hash();
# These are combinations of colors plus the "reset" color.
$colors{'red_underlined'} = color('bright_red underline');    # bright red text
$colors{'redonwht'} = color('bright_red on_white'); # bright red text on white background
$colors{'whtonred'} = color('bright_white on_red'); # bright white text on red background
$colors{'ltred'} = color('ansi211');                # light red text
$colors{'blkonwht'} = color('black on_white');      # bright white text
$colors{'normal'} = color('reset');                 # normal text

# If we get called with a '--colors' option, dump our colors'
if ( grep(/--colors/, @ARGV) ) {
  print STDERR "Here are the colors I know about:\n";
  my $i = 0;
  foreach my $k (sort keys %colors) {
    next if $k =~ /^on_/;   # Skip the "white on $k" colors
    print STDERR "    " . $colors{$k} . $k . color('reset') . "\t";
    $i++;
    if ($i >= 4) {
      print "\n";
      $i = 0;
    }
  }
  exit 0;
}

my %regexs;
my @color_keys = keys %colors;
while ($#ARGV > 0) {
  my $color = shift;
  my $regex = shift;
  unless(grep /$color/, @color_keys) {
    print STDERR "The color '$color' is not valid. Here are the list of valid color options:\n";
    print STDERR "    " . join(' ', sort keys %colors) . "\n";
    exit 1;
  }
  $regexs{$regex} = $color;
}

my $reset = color('reset');
while(my $line = <STDIN>) {
  foreach my $r (keys %regexs) {
    my $c = $regexs{$r};
    $line =~ s/($r)/$colors{$c}$1$reset/g;
  }
  print $line;
}
exit;
